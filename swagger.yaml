swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
       # - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/transaction:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Transaction
      description: api to visualise transactions from current month
      produces:
        - application/json
      responses:
        '200':
          description: Transactions retrieved sucessfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error 
    put:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Modify transaction info
      description: API to modify information fields of an existing transaction (transactioninfos:transactionTyp , category, note).
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Object containing the transactionId and updated transactioninfos fields
          required: true
          schema:
            type: object
            properties:
              transactionId:
                type: string
                description: ID of the transaction to update
                example: '609e125b12345abcde67890f'
              transactioninfos:
                type: object
                description: Fields to update inside the transaction
                properties:
                  transactionType:
                    type: string
                    example: debit
                  category:
                    type: string
                    example: food
                  note:
                    type: string
                    example: lunch at restaurant
            required:
              - transactionId
              - transactioninfos
      responses:
        '200':
          description: Transaction modified successfully
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 0
              message:
                type: string
                example: Transaction modified successfully
              body:
                type: object
                properties:
                  transactioninfos:
                    type: object
                    properties:
                      transactionType:
                        type: string
                      category:
                        type: string
                      note:
                        type: string
        '400':
          description: Invalid Fields
        '404':
          description: Servor Error
        '500':
          description: Internal Server Error
  /user/transaction/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get single transaction
      description: Retrieve a single transaction by its ID
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          required: true
          type: string
          description: ID of the transaction to retrieve
      responses:
        '200':
          description: Transaction retrieved successfully
          schema:
            $ref: '#/definitions/Transaction'
        '400':
          description: Invalid transaction ID
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error
                  
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
  Transaction:
    type: object
    properties:
      date:
        type: string
      description:
        type: object
        properties:
          transactionType:
            type: string
            description: Type of the transaction
          category:
            type: string
            description: Category of the transaction
          note:
            type: string
            description: user notes
      id:
        type: string
      amount:
        type: number
      
    